/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/Dashboard/YourKeywords/KeywordsTrendsCard.js":
/*!*********************************************************************!*\
  !*** ./src/components/Dashboard/YourKeywords/KeywordsTrendsCard.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// import React from 'react';\n// import Link from 'next/link';\n// import { Pie } from 'react-chartjs-2';\n// import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js'; // Import required elements\n// import DashboardCard from '../../DashboardCard'; // Import the reusable DashboardCard component\n// //import  '../../../styles/Keywords/KeywordsTrendsCard.module.css'; // Import the CSS file for this component\n// import styles from '../../../styles/Keywords/KeywordsTrendsCard.module.css';\n// // Register required elements for Chart.js\n// ChartJS.register(ArcElement, Tooltip, Legend);\n// const KeywordsTrendsCard = () => {\n//   // Data for the pie chart\n//   const data = {\n//     labels: ['To write content', 'Ideas and Inspiration', 'To create Outline', 'To draft content'],\n//     datasets: [\n//       {\n//         data: [6, 45, 31, 18],\n//         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\n//         hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\n//       },\n//     ],\n//   };\n//   return (\n// <DashboardCard className={styles['keywords-trends-card']}>\n//     <div className={styles['keycard-header']}>\n//       <span>Your Keywords, Trends, Insights</span>\n//       <Link href=\"/Keywords_Trends\" className={styles['close-button']}>\n//         <button>â†—</button>\n//       </Link>\n//     </div>\n//     <div className={styles['card-body']}>\n//       <Pie data={data} />\n//     </div>\n//   </DashboardCard>\n//   );\n// };\n// export default KeywordsTrendsCard;\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports on update so we can compare the boundary\r\n                // signatures.\r\n                module.hot.dispose(function (data) {\r\n                    data.prevExports = currentExports;\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevExports !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevExports !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EYXNoYm9hcmQvWW91cktleXdvcmRzL0tleXdvcmRzVHJlbmRzQ2FyZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsZ0NBQWdDO0FBQ2hDLHlDQUF5QztBQUN6Qyx3R0FBd0c7QUFDeEcsa0dBQWtHO0FBQ2xHLGdIQUFnSDtBQUNoSCwrRUFBK0U7QUFFL0UsNkNBQTZDO0FBQzdDLGlEQUFpRDtBQUVqRCxxQ0FBcUM7QUFDckMsOEJBQThCO0FBQzlCLG1CQUFtQjtBQUNuQixzR0FBc0c7QUFDdEcsa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVixpQ0FBaUM7QUFDakMseUVBQXlFO0FBQ3pFLDhFQUE4RTtBQUM5RSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFFUCxhQUFhO0FBQ2IsNkRBQTZEO0FBQzdELGlEQUFpRDtBQUNqRCxxREFBcUQ7QUFDckQsMEVBQTBFO0FBQzFFLDZCQUE2QjtBQUM3QixnQkFBZ0I7QUFDaEIsYUFBYTtBQUNiLDRDQUE0QztBQUM1Qyw0QkFBNEI7QUFDNUIsYUFBYTtBQUNiLHFCQUFxQjtBQUNyQixPQUFPO0FBQ1AsS0FBSztBQUVMLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9EYXNoYm9hcmQvWW91cktleXdvcmRzL0tleXdvcmRzVHJlbmRzQ2FyZC5qcz81YzJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbi8vIGltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluayc7XHJcbi8vIGltcG9ydCB7IFBpZSB9IGZyb20gJ3JlYWN0LWNoYXJ0anMtMic7XHJcbi8vIGltcG9ydCB7IENoYXJ0IGFzIENoYXJ0SlMsIEFyY0VsZW1lbnQsIFRvb2x0aXAsIExlZ2VuZCB9IGZyb20gJ2NoYXJ0LmpzJzsgLy8gSW1wb3J0IHJlcXVpcmVkIGVsZW1lbnRzXHJcbi8vIGltcG9ydCBEYXNoYm9hcmRDYXJkIGZyb20gJy4uLy4uL0Rhc2hib2FyZENhcmQnOyAvLyBJbXBvcnQgdGhlIHJldXNhYmxlIERhc2hib2FyZENhcmQgY29tcG9uZW50XHJcbi8vIC8vaW1wb3J0ICAnLi4vLi4vLi4vc3R5bGVzL0tleXdvcmRzL0tleXdvcmRzVHJlbmRzQ2FyZC5tb2R1bGUuY3NzJzsgLy8gSW1wb3J0IHRoZSBDU1MgZmlsZSBmb3IgdGhpcyBjb21wb25lbnRcclxuLy8gaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi9zdHlsZXMvS2V5d29yZHMvS2V5d29yZHNUcmVuZHNDYXJkLm1vZHVsZS5jc3MnO1xyXG5cclxuLy8gLy8gUmVnaXN0ZXIgcmVxdWlyZWQgZWxlbWVudHMgZm9yIENoYXJ0LmpzXHJcbi8vIENoYXJ0SlMucmVnaXN0ZXIoQXJjRWxlbWVudCwgVG9vbHRpcCwgTGVnZW5kKTtcclxuXHJcbi8vIGNvbnN0IEtleXdvcmRzVHJlbmRzQ2FyZCA9ICgpID0+IHtcclxuLy8gICAvLyBEYXRhIGZvciB0aGUgcGllIGNoYXJ0XHJcbi8vICAgY29uc3QgZGF0YSA9IHtcclxuLy8gICAgIGxhYmVsczogWydUbyB3cml0ZSBjb250ZW50JywgJ0lkZWFzIGFuZCBJbnNwaXJhdGlvbicsICdUbyBjcmVhdGUgT3V0bGluZScsICdUbyBkcmFmdCBjb250ZW50J10sXHJcbi8vICAgICBkYXRhc2V0czogW1xyXG4vLyAgICAgICB7XHJcbi8vICAgICAgICAgZGF0YTogWzYsIDQ1LCAzMSwgMThdLFxyXG4vLyAgICAgICAgIGJhY2tncm91bmRDb2xvcjogWycjRkY2Mzg0JywgJyMzNkEyRUInLCAnI0ZGQ0U1NicsICcjNEJDMEMwJ10sXHJcbi8vICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IFsnI0ZGNjM4NCcsICcjMzZBMkVCJywgJyNGRkNFNTYnLCAnIzRCQzBDMCddLFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgXSxcclxuLy8gICB9O1xyXG5cclxuLy8gICByZXR1cm4gKFxyXG4vLyA8RGFzaGJvYXJkQ2FyZCBjbGFzc05hbWU9e3N0eWxlc1sna2V5d29yZHMtdHJlbmRzLWNhcmQnXX0+XHJcbi8vICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzWydrZXljYXJkLWhlYWRlciddfT5cclxuLy8gICAgICAgPHNwYW4+WW91ciBLZXl3b3JkcywgVHJlbmRzLCBJbnNpZ2h0czwvc3Bhbj5cclxuLy8gICAgICAgPExpbmsgaHJlZj1cIi9LZXl3b3Jkc19UcmVuZHNcIiBjbGFzc05hbWU9e3N0eWxlc1snY2xvc2UtYnV0dG9uJ119PlxyXG4vLyAgICAgICAgIDxidXR0b24+4oaXPC9idXR0b24+XHJcbi8vICAgICAgIDwvTGluaz5cclxuLy8gICAgIDwvZGl2PlxyXG4vLyAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1snY2FyZC1ib2R5J119PlxyXG4vLyAgICAgICA8UGllIGRhdGE9e2RhdGF9IC8+XHJcbi8vICAgICA8L2Rpdj5cclxuLy8gICA8L0Rhc2hib2FyZENhcmQ+XHJcbi8vICAgKTtcclxuLy8gfTtcclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IEtleXdvcmRzVHJlbmRzQ2FyZDtcclxuXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Dashboard/YourKeywords/KeywordsTrendsCard.js\n"));

/***/ })

});